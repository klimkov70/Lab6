#include <iostream>
#include <vector>
#include <iomanip>

using namespace std;

// Функция для вывода матрицы на экран
void printMatrix(const vector<vector<double>>& matrix) {
    int n = matrix.size(); // Размерность матрицы
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cout << setprecision(2) << fixed << matrix[i][j] << " ";
        }
        cout << endl;
    }
}

// Функция для проверки ввода матрицы сравнений
bool checkMatrix(const vector<vector<double>>& matrix) {
    int n = matrix.size(); // Размерность матрицы
    for (int i = 0; i < n; i++) {
        if (matrix[i][i] != 1.0) {
            return false; // Проверка диагональных элементов
        }
        for (int j = 0; j < n; j++) {
            if (matrix[i][j] * matrix[j][i] != 1.0) {
                return false; // Проверка условия реципрочности
            }
        }
    }
    return true;
}

// Основная функция для анализа иерархий
void analyzeHierarchy() {
    int n;
    cout << "Введите количество элементов: ";
    cin >> n;

    vector<vector<double>> comparisons(n, vector<double>(n, 0));

    // Ввод матрицы сравнений
    cout << "Введите элементы матрицы сравнений:" << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> comparisons[i][j];
        }
    }

    // Проверка матрицы сравнений на корректность
    if (!checkMatrix(comparisons)) {
        cout << "Матрица сравнений некорректна!" << endl;
        return;
    }

    // Попарное сравнение критериев
    vector<double> weights(n, 0);
    for (int i = 0; i < n; i++) {
        cout << "Введите вес критерия " << i + 1 << ": ";
        cin >> weights[i];
    }

    double sum = 0;
    for (const auto& weight : weights) {
        sum += weight;
    }

    // Нормализация весовых коэффициентов
    for (auto& weight : weights) {
        weight /= sum;
    }

    // Вывод результатов
    cout << "Весовые коэффициенты:" << endl;
    for (int i = 0; i < n; i++) {
        cout << "Критерий " << i + 1 << ": " << setprecision(2) << fixed << weights[i] << endl;
    }
}

int main() {
    analyzeHierarchy();
    return 0;
}
